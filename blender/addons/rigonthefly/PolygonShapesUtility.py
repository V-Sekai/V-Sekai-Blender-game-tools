#########################################
#######       Rig On The Fly      #######
####### Copyright Â© 2020 Dypsloom #######
#######    https://dypsloom.com/  #######
#########################################

import bpy

class PolygonShapes:
    @staticmethod
    def SquarePolygon ():
        #view_layer = bpy.context.view_layer
        verts = [(1.0, 0.0, 1.0), (-1.0, 0.0, 1.0), (-1.0, 0.0, -1.0), (1.0, 0.0, -1.0), (0.0, 0.0, 1.3), (-0.2, 0.0, 1.0), (0.2, 0.0, 1.0), (0.0, 0.1, 1.0), (0.0, 0.0, -0.8), (0.2, 0.0, -1.0), (-0.2, 0.0, -1.0)]
        faces = [[4, 5, 7], [0, 6, 7, 5, 1, 2, 10, 8, 9, 3], [6, 4, 7]]

        mySquareMesh = bpy.data.meshes.new("RotF_Square")
        mySquareObject = bpy.data.objects.new("RotF_Square", mySquareMesh)

        mySquareObject.location = (0,0,0)

        mySquareMesh.from_pydata(verts,[],faces)
        mySquareMesh.update(calc_edges=True)
    
    @staticmethod
    def SquarePointerPolygon (name):
        axis = name[-1]
        sign = name[-2]
        s = 1
        if sign == "-":
            s = -1
        if axis == "X":
            vertex1 = (s*1.0, 0.0 ,0.0)
            vertex2 = (s*2.0, 0.0 ,0.0)
        elif axis == "Y":
            vertex1 = (0.0, s*1.0, 0.0)
            vertex2 = (0.0, s*2.0, 0.0)
        elif axis == "Z":
            vertex1 = (0.0, 0.0, s*1.0)
            vertex2 = (0.0, 0.0, s*2.0)

        #view_layer = bpy.context.view_layer
        verts = [(1.0, 0.0, 1.0), (-1.0, 0.0, 1.0), (-1.0, 0.0, -1.0), (1.0, 0.0, -1.0), (0.0, 0.0, 1.3), (-0.2, 0.0, 1.0), (0.2, 0.0, 1.0), (0.0, 0.1, 1.0), (0.0, 0.0, -0.8), (0.2, 0.0, -1.0), (-0.2, 0.0, -1.0), 
            (0.0, 0.0, 0.0), vertex1, vertex2]
        faces = [[4, 5, 7], [0, 6, 7, 5, 1, 2, 10, 8, 9, 3], [6, 4, 7], [11, 13, 12]]

        mySquarePointerMesh = bpy.data.meshes.new(name)
        mySquarePointerObject = bpy.data.objects.new(name, mySquarePointerMesh)

        mySquarePointerObject.location = (0,0,0)

        mySquarePointerMesh.from_pydata(verts,[],faces)
        mySquarePointerMesh.update(calc_edges=True)

    @staticmethod
    def CubePolygon ():
       #view_layer = bpy.context.view_layer
       verts = [(-0.5, -0.5, -0.5), (-0.5, -0.5, 0.5), (-0.5, 0.5, -0.5), (-0.5, 0.5, 0.5), (0.5, -0.5, -0.5), (0.5, -0.5, 0.5), (0.5, 0.5, -0.5), (0.5, 0.5, 0.5)]
       faces = [[0, 1, 3, 2], [2, 3, 7, 6], [6, 7, 5, 4], [4, 5, 1, 0], [2, 6, 4, 0], [7, 3, 1, 5]]

       myCubeMesh = bpy.data.meshes.new("RotF_Cube")
       myCubeObject = bpy.data.objects.new("RotF_Cube", myCubeMesh)

       myCubeObject.location = (0,0,0)

       myCubeMesh.from_pydata(verts,[],faces)
       myCubeMesh.update(calc_edges=True)

    @staticmethod
    def CirclePointerPolygon (name):
        axis = name[-1]
        sign = name[-2]
        s = 1
        if sign == "-":
            s = -1
        if axis == "X":
            vertex1 = (s*1.0, 0.0 ,0.0)
            vertex2 = (s*2.0, 0.0 ,0.0)
        elif axis == "Y":
            vertex1 = (0.0, s*1.0, 0.0)
            vertex2 = (0.0, s*2.0, 0.0)
        elif axis == "Z":
            vertex1 = (0.0, 0.0, s*1.0)
            vertex2 = (0.0, 0.0, s*2.0)
        

        #view_layer = bpy.context.view_layer
        verts = [(0.0, 0.0, 1.3), (0.19508999586105347, 0.0, 0.9807900190353394), (0.3826799988746643, 0.0, 0.9238799810409546), (0.5555700063705444, 0.0, 0.8314700126647949), (0.7071099877357483, 0.0, 0.7071099877357483), (0.8314700126647949, 0.0, 0.5555700063705444), (0.9238799810409546, 0.0, 0.3826799988746643), (0.9807900190353394, 0.0, 0.19508999586105347), (1.0, 0.0, 0.0), (0.9807900190353394, 0.0, -0.19508999586105347), (0.9238799810409546, 0.0, -0.3826799988746643), (0.8314700126647949, 0.0, -0.5555700063705444), (0.7071099877357483, 0.0, -0.7071099877357483), (0.5555700063705444, 0.0, -0.8314700126647949), (0.3826799988746643, 0.0, -0.9238799810409546), (0.19508999586105347, 0.0, -0.9807900190353394), (0.0, 0.0, -0.800000011920929), (-0.19508999586105347, 0.0, -0.9807900190353394), (-0.3826799988746643, 0.0, -0.9238799810409546), (-0.5555700063705444, 0.0, -0.8314700126647949), (-0.7071099877357483, 0.0, -0.7071099877357483), (-0.8314700126647949, 0.0, -0.5555700063705444), (-0.9238799810409546, 0.0, -0.3826799988746643), (-0.9807900190353394, 0.0, -0.19508999586105347), (-1.0, 0.0, 0.0), (-0.9807900190353394, 0.0, 0.19508999586105347), (-0.9238799810409546, 0.0, 0.3826799988746643), (-0.8314700126647949, 0.0, 0.5555700063705444), (-0.7071099877357483, 0.0, 0.7071099877357483), (-0.5555700063705444, 0.0, 0.8314700126647949), (-0.3826799988746643, 0.0, 0.9238799810409546), (-0.19508999586105347, 0.0, 0.9807900190353394), (0.0, 0.20000000298023224, 1.0),
            (0.0, 0.0, 0.0), vertex1, vertex2]
        faces = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 1, 32], [31, 0, 32],[33, 34, 35]]

        myCirclePointerMesh = bpy.data.meshes.new(name)
        myCirclePointerObject = bpy.data.objects.new(name, myCirclePointerMesh)

        myCirclePointerObject.location = (0,0,0)

        myCirclePointerMesh.from_pydata(verts,[],faces)
        myCirclePointerMesh.update(calc_edges=True)
    
    @staticmethod
    def CirclePolygon ():
        #view_layer = bpy.context.view_layer
        verts = [(0.0, 0.0, 1.3), (0.19508999586105347, 0.0, 0.9807900190353394), (0.3826799988746643, 0.0, 0.9238799810409546), (0.5555700063705444, 0.0, 0.8314700126647949), (0.7071099877357483, 0.0, 0.7071099877357483), (0.8314700126647949, 0.0, 0.5555700063705444), (0.9238799810409546, 0.0, 0.3826799988746643), (0.9807900190353394, 0.0, 0.19508999586105347), (1.0, 0.0, 0.0), (0.9807900190353394, 0.0, -0.19508999586105347), (0.9238799810409546, 0.0, -0.3826799988746643), (0.8314700126647949, 0.0, -0.5555700063705444), (0.7071099877357483, 0.0, -0.7071099877357483), (0.5555700063705444, 0.0, -0.8314700126647949), (0.3826799988746643, 0.0, -0.9238799810409546), (0.19508999586105347, 0.0, -0.9807900190353394), (0.0, 0.0, -0.800000011920929), (-0.19508999586105347, 0.0, -0.9807900190353394), (-0.3826799988746643, 0.0, -0.9238799810409546), (-0.5555700063705444, 0.0, -0.8314700126647949), (-0.7071099877357483, 0.0, -0.7071099877357483), (-0.8314700126647949, 0.0, -0.5555700063705444), (-0.9238799810409546, 0.0, -0.3826799988746643), (-0.9807900190353394, 0.0, -0.19508999586105347), (-1.0, 0.0, 0.0), (-0.9807900190353394, 0.0, 0.19508999586105347), (-0.9238799810409546, 0.0, 0.3826799988746643), (-0.8314700126647949, 0.0, 0.5555700063705444), (-0.7071099877357483, 0.0, 0.7071099877357483), (-0.5555700063705444, 0.0, 0.8314700126647949), (-0.3826799988746643, 0.0, 0.9238799810409546), (-0.19508999586105347, 0.0, 0.9807900190353394), (0.0, 0.20000000298023224, 1.0)]
        faces = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [0, 1, 32], [31, 0, 32]]

        myCircleMesh = bpy.data.meshes.new("RotF_Circle")
        myCircleObject = bpy.data.objects.new("RotF_Circle", myCircleMesh)

        myCircleObject.location = (0,0,0)

        myCircleMesh.from_pydata(verts,[],faces)
        myCircleMesh.update(calc_edges=True)
    
    @staticmethod
    def SpherePolygon ():
        #view_layer = bpy.context.view_layer
        verts = [(-5.834711913621504e-08, 0.5000001788139343, -1.1486312345709848e-08), (-0.09754522144794464, 0.4903927743434906, -1.1486312345709848e-08), (-0.19134178757667542, 0.46193990111351013, -1.1486312345709848e-08), (-0.27778518199920654, 0.4157349467277527, -1.1486312345709848e-08), (-0.35355344414711, 0.35355353355407715, -1.1486312345709848e-08), (-0.4157348871231079, 0.2777852416038513, -1.1486312345709848e-08), (-0.46193981170654297, 0.19134187698364258, -1.1486312345709848e-08), (-0.49039268493652344, 0.0975453332066536, -1.1486312345709848e-08), (-0.5000000596046448, 1.939783089710545e-07, -1.1486312345709848e-08), (-0.4903927147388458, -0.09754494577646255, -1.1486312345709848e-08), (-0.46193984150886536, -0.19134147465229034, -1.1486312345709848e-08), (-0.4157348871231079, -0.27778494358062744, -1.1486312345709848e-08), (-0.35355344414711, -0.35355323553085327, -1.1486312345709848e-08), (-0.27778515219688416, -0.4157346785068512, -1.1486312345709848e-08), (-0.19134169816970825, -0.46193966269493103, -1.1486312345709848e-08), (-0.09754510223865509, -0.4903925061225891, -1.1486312345709848e-08), (1.0457357291215885e-07, -0.49999988079071045, -1.1486312345709848e-08), (0.09754530340433121, -0.49039244651794434, -1.1486312345709848e-08), (0.19134187698364258, -0.4619395136833191, -1.1486312345709848e-08), (0.2777853012084961, -0.41573449969291687, -1.1486312345709848e-08), (0.35355356335639954, -0.35355302691459656, -1.1486312345709848e-08), (0.4157349467277527, -0.27778467535972595, -1.1486312345709848e-08), (0.46193987131118774, -0.19134117662906647, -1.1486312345709848e-08), (0.49039265513420105, -0.09754457324743271, -1.1486312345709848e-08), (0.4999999403953552, 6.390289399860194e-07, -1.1486312345709848e-08), (0.4903924763202667, 0.09754583239555359, -1.1486312345709848e-08), (0.4619394838809967, 0.19134239852428436, -1.1486312345709848e-08), (0.4157344102859497, 0.2777857780456543, -1.1486312345709848e-08), (0.3535528779029846, 0.35355398058891296, -1.1486312345709848e-08), (0.2777844965457916, 0.4157353341579437, -1.1486312345709848e-08), (0.19134098291397095, 0.461940199136734, -1.1486312345709848e-08), (0.0975443497300148, 0.49039292335510254, -1.1486312345709848e-08), (-5.834711913621504e-08, 3.350432962179184e-07, -0.49999988079071045), (-0.09754522144794464, 3.350432962179184e-07, -0.4903925061225891), (-0.19134178757667542, 3.350432962179184e-07, -0.46193963289260864), (-0.27778518199920654, 3.350432962179184e-07, -0.4157346785068512), (-0.35355344414711, 3.350432962179184e-07, -0.35355326533317566), (-0.4157348871231079, 3.052409738302231e-07, -0.27778497338294983), (-0.46193981170654297, 3.2014213502407074e-07, -0.1913415789604187), (-0.49039268493652344, 3.052409738302231e-07, -0.09754504263401031), (-0.5000000596046448, 2.9872171580791473e-07, 9.32570998202209e-08), (-0.4903927147388458, 2.9033981263637543e-07, 0.09754523634910583), (-0.46193984150886536, 2.9033981263637543e-07, 0.19134177267551422), (-0.4157348871231079, 2.7543865144252777e-07, 0.27778521180152893), (-0.35355344414711, 2.7543865144252777e-07, 0.35355350375175476), (-0.27778515219688416, 2.7543865144252777e-07, 0.4157349467277527), (-0.19134169816970825, 2.7543865144252777e-07, 0.4619399309158325), (-0.09754510223865509, 2.7543865144252777e-07, 0.4903927743434906), (1.0457357291215885e-07, 2.7543865144252777e-07, 0.5000001192092896), (0.09754530340433121, 2.7543865144252777e-07, 0.4903927147388458), (0.19134187698364258, 2.7543865144252777e-07, 0.4619397819042206), (0.2777853012084961, 2.7543865144252777e-07, 0.41573476791381836), (0.35355356335639954, 2.7543865144252777e-07, 0.35355329513549805), (0.4157349467277527, 2.7543865144252777e-07, 0.27778494358062744), (0.46193987131118774, 2.9033981263637543e-07, 0.19134147465229034), (0.49039265513420105, 2.9033981263637543e-07, 0.09754486382007599), (0.4999999403953552, 2.9872174422962416e-07, -3.517935169838893e-07), (0.4903924763202667, 3.052409738302231e-07, -0.09754554182291031), (0.4619394838809967, 3.2014213502407074e-07, -0.19134210050106049), (0.4157344102859497, 3.052409738302231e-07, -0.2777855098247528), (0.3535528779029846, 3.350432962179184e-07, -0.3535537123680115), (0.2777844965457916, 3.350432962179184e-07, -0.41573506593704224), (0.19134098291397095, 3.350432962179184e-07, -0.4619399309158325), (0.0975443497300148, 3.350432962179184e-07, -0.49039265513420105), (-1.5072268411131517e-07, 3.6141136661171913e-07, -0.49999988079071045), (-1.5520467400165217e-07, -0.09754479676485062, -0.4903925061225891), (-1.62655254598576e-07, -0.1913413554430008, -0.46193963289260864), (-1.7755641579242365e-07, -0.2777847647666931, -0.4157346785068512), (-1.7755641579242365e-07, -0.35355302691459656, -0.35355326533317566), (-1.4775409340472834e-07, -0.4157344698905945, -0.27778497338294983), (-1.7755641579242365e-07, -0.46193936467170715, -0.1913415789604187), (-1.4775409340472834e-07, -0.49039226770401, -0.09754504263401031), (-1.4775409340472834e-07, -0.49999964237213135, 9.32570998202209e-08), (-1.4775409340472834e-07, -0.4903922975063324, 0.09754523634910583), (-1.4775409340472834e-07, -0.46193942427635193, 0.19134177267551422), (-1.1795176391160567e-07, -0.4157344698905945, 0.27778521180152893), (-1.1795176391160567e-07, -0.35355302691459656, 0.35355350375175476), (-1.1795176391160567e-07, -0.2777847349643707, 0.4157349467277527), (-1.0305060271775801e-07, -0.19134126603603363, 0.4619399309158325), (-9.560002212083418e-08, -0.09754467755556107, 0.4903927743434906), (-9.111801801964248e-08, 5.243320515546657e-07, 0.5000001192092896), (-8.069886092698653e-08, 0.09754572808742523, 0.4903927147388458), (-7.32482803300627e-08, 0.1913423091173172, 0.4619397819042206), (-5.834711913621504e-08, 0.2777857184410095, 0.41573476791381836), (-5.834711913621504e-08, 0.35355398058891296, 0.35355329513549805), (-5.834711913621504e-08, 0.4157353639602661, 0.27778494358062744), (-5.834711913621504e-08, 0.4619402587413788, 0.19134147465229034), (-5.834711913621504e-08, 0.4903930723667145, 0.09754486382007599), (-5.834711913621504e-08, 0.5000002980232239, -3.517935169838893e-07), (-8.814944152391035e-08, 0.49039289355278015, -0.09754554182291031), (-8.814944152391035e-08, 0.46193990111351013, -0.19134210050106049), (-8.814944152391035e-08, 0.41573482751846313, -0.2777855098247528), (-1.1795176391160567e-07, 0.35355329513549805, -0.3535537123680115), (-1.1795176391160567e-07, 0.27778491377830505, -0.41573506593704224), (-1.3285293221088068e-07, 0.19134141504764557, -0.4619399309158325), (-1.403035128078045e-07, 0.09754477441310883, -0.49039265513420105)]
        faces = [[1, 0, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2], [33, 32, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34], [65, 64, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66]]

        mySphereMesh = bpy.data.meshes.new("RotF_Sphere")
        mySphereObject = bpy.data.objects.new("RotF_Sphere", mySphereMesh)

        mySphereObject.location = (0,0,0)

        mySphereMesh.from_pydata(verts,[],faces)
        mySphereMesh.update(calc_edges=True)

    @staticmethod
    def OctagonPolygon ():
        #view_layer = bpy.context.view_layer
        verts = [(0,0,1.3),(0.19509,0,0.98079),(0.70711,0,0.70711),(1,0,0),(0.70711,0,-0.70711),(0,0,-1),(-0.70711,0,-0.70711),(-1,0,0),(-0.70711,0,0.70711),(-0.19509,0,0.98079)]
        faces = [(0,1,2,3,4,5,6,7,8,9)]

        myOctagonMesh = bpy.data.meshes.new("RotF_Octagon")
        myOctagonObject = bpy.data.objects.new("RotF_Octagon", myOctagonMesh)

        myOctagonObject.location = (0,0,0)

        myOctagonMesh.from_pydata(verts,[],faces)
        myOctagonMesh.update(calc_edges=True)

    @staticmethod
    def LocatorPolygon ():
        #view_layer = bpy.context.view_layer
        verts = [(0,0,0),(0,0,1),(0,0,-1),(1,0,0),(-1,0,0),(0,1,0),(0,-1,0)]
        faces = [(0,1,2),(0,3,4),(0,5,6)]

        myLocatorMesh = bpy.data.meshes.new("RotF_Locator")
        myLocatorObject = bpy.data.objects.new("RotF_Locator", myLocatorMesh)

        myLocatorObject.location = (0,0,0)

        myLocatorMesh.from_pydata(verts,[],faces)
        myLocatorMesh.update(calc_edges=True)

    @staticmethod
    def CrossPolygon ():
        #view_layer = bpy.context.view_layer
        verts = [(0.0, 0.0, 1.0), (0.0, 0.0, 0.0), (0.0, 0.0, -1.0), (1.0, 0.0, 0.0), (0.0, 0.0, 0.0), (-1.0, 0.0, 0.0)]
        faces = [[0, 1, 2], [3, 4, 5]]

        myCrossMesh = bpy.data.meshes.new("RotF_Cross")
        myCrossObject = bpy.data.objects.new("RotF_Cross", myCrossMesh)

        myCrossObject.location = (0,0,0)

        myCrossMesh.from_pydata(verts,[],faces)
        myCrossMesh.update(calc_edges=True)

    @staticmethod
    def AddControllerShapes():
        #add controller shapes if not already in the scene
        if bpy.data.objects.get("RotF_Square") is None:
            PolygonShapes.SquarePolygon()

        if bpy.data.objects.get("RotF_SquarePointer+Y") is None:
            PolygonShapes.SquarePointerPolygon("RotF_SquarePointer+Y")
        if bpy.data.objects.get("RotF_SquarePointer-Y") is None:
            PolygonShapes.SquarePointerPolygon("RotF_SquarePointer-Y")
        if bpy.data.objects.get("RotF_SquarePointer+X") is None:
            PolygonShapes.SquarePointerPolygon("RotF_SquarePointer+X")
        if bpy.data.objects.get("RotF_SquarePointer-X") is None:
            PolygonShapes.SquarePointerPolygon("RotF_SquarePointer-X")
        if bpy.data.objects.get("RotF_SquarePointer+Z") is None:
            PolygonShapes.SquarePointerPolygon("RotF_SquarePointer+Z")
        if bpy.data.objects.get("RotF_SquarePointer-Z") is None:
            PolygonShapes.SquarePointerPolygon("RotF_SquarePointer-Z")

        if bpy.data.objects.get("RotF_Cube") is None:
            PolygonShapes.CubePolygon()    
        if bpy.data.objects.get("RotF_Circle") is None:
            PolygonShapes.CirclePolygon()
        if bpy.data.objects.get("RotF_Sphere") is None:
            PolygonShapes.SpherePolygon()
        if bpy.data.objects.get("RotF_Octagon") is None:
            PolygonShapes.OctagonPolygon()
        if bpy.data.objects.get("RotF_Locator") is None:
            PolygonShapes.LocatorPolygon()
        if bpy.data.objects.get("RotF_Cross") is None:
            PolygonShapes.CrossPolygon()

        if bpy.data.objects.get("RotF_CirclePointer+Y") is None:
            PolygonShapes.CirclePointerPolygon ("RotF_CirclePointer+Y")
        if bpy.data.objects.get("RotF_CirclePointer-Y") is None:
            PolygonShapes.CirclePointerPolygon ("RotF_CirclePointer-Y")
        if bpy.data.objects.get("RotF_CirclePointer+X") is None:
            PolygonShapes.CirclePointerPolygon ("RotF_CirclePointer+X")
        if bpy.data.objects.get("RotF_CirclePointer-X") is None:
            PolygonShapes.CirclePointerPolygon ("RotF_CirclePointer-X")
        if bpy.data.objects.get("RotF_CirclePointer+Z") is None:
            PolygonShapes.CirclePointerPolygon ("RotF_CirclePointer+Z")
        if bpy.data.objects.get("RotF_CirclePointer-Z") is None:
            PolygonShapes.CirclePointerPolygon ("RotF_CirclePointer-Z")